/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/chair.gltf 
*/

import React from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import *as THREE from "three"; //import THREE.RepeatWrapping
import { useCustomization } from '../contexts/Customization';

const Chair =(props) => {
  const { nodes, materials } = useGLTF('./models/chair.gltf')

  const{material, legs, chairColor, cushionColor} =useCustomization();

  const leatherTextureProps = useTexture({
    // map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
    aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg"
  })

  //uv multplier
  //leatherTextureProps.map.repeat.set(2,2); 
  leatherTextureProps.normalMap.repeat.set(3,3);
  leatherTextureProps.roughnessMap.repeat.set(3,3);
  leatherTextureProps.aoMap.repeat.set(3,3);

  //Fix wrapping
  //leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =THREE.RepeatWrapping;
  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =THREE.RepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS = leatherTextureProps.roughnessMap.wrapT =THREE.RepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =THREE.RepeatWrapping;

  const fabricTextureProps = useTexture({
    // map: "./textures/fabric/Fabric_Knitted_006_basecolor.jpg",
    normalMap: "./textures/fabric/Fabric_Knitted_006_normal.jpg",
    roughnessMap: "./textures/fabric/Fabric_Knitted_006_roughness.jpg",
    aoMap: "./textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg"
  })

  //uv multplier
  //fabricTextureProps.map.repeat.set(2,2); 
  fabricTextureProps.normalMap.repeat.set(3,3);
  fabricTextureProps.roughnessMap.repeat.set(3,3);
  fabricTextureProps.aoMap.repeat.set(3,3);

  //Fix wrapping
  //fabricTextureProps.map.wrapS = fabricTextureProps.map.wrapT =THREE.RepeatWrapping;
  fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT =THREE.RepeatWrapping;
  fabricTextureProps.roughnessMap.wrapS = fabricTextureProps.roughnessMap.wrapT =THREE.RepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT =THREE.RepeatWrapping;

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial 
        {...material ==="leather"
           ? leatherTextureProps:fabricTextureProps}
           color = {chairColor.color}
           />
        </mesh>
      <mesh geometry={nodes.Cushion.geometry} material={materials.Cushion} position={[0, 0.064, 0.045]}>
        <meshStandardMaterial {...fabricTextureProps} color= {cushionColor.color}/>
        </mesh>
      <mesh geometry={nodes.Legs1.geometry} material={materials.Legs} visible ={legs===1}/>
      <mesh geometry={nodes.Legs2.geometry} material={materials.Legs} visible= {legs ===2}/>
    </group>
  )
}

useGLTF.preload('./models/chair.gltf')

export default Chair;
